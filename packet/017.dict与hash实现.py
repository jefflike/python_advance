'''
__title__ = '017.dict与hash实现.py'
__author__ = 'Jeffd'
__time__ = '4/17/18 6:47 PM'
'''
'''
    tips: python中的字典存储方式实际上就是hash，
    比如我要存一个key:'a',value:1,的键值对，那么首先将'a'与一个值的结果
    hash（必须要可以被hash，可变类型是不能被hash的），根据hash的值在hash table
    表元中找到存放的位置,将键值存放到表元中。当然可能会出现冲突的问题，比如存储一个k,v
    为'ba':1的键值对，首先将'a'与一个值的结果hash，然后将hash的值与表元的相应位置对比
    发现此处已经被占领了，这时候解决冲突很重要，将'ba'与一个值的结果hash，得到的值在表元中查找发现
    为空，则可以存放我们的键值。
    图：017.hash如何存储字典.png
    
    查询字典的方式与添加很类似，图：017.hash查询键值.png。
    1. dict的key与set的值都必须是可以hash的
    （不可变类型都是可hash的，它们的类都实现了__hash__方法）
    2. dict的内存花销大，但是查询速度快，自定义的对象或者python内部的对象都是dict方式实现的
    3. hash并不意味着无序，我们的字典虽然打印是无序的，但是存储的表元中存储顺序和
    元素添加顺序有关
    4. 添加数据可能会改变已有的数据的顺序，当数据量超过当前乘放字典的数组的大小后，
    会创建新的数组（我记得是之前数组容量的4倍的数组），然后将现在的字典复制过去，所以
    增加数据可能会导致字典顺序发生变化
'''
